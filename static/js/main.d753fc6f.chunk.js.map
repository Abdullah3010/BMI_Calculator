{"version":3,"sources":["componants/input_field.js","componants/Button.js","componants/message.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","_ref","inputClass","lableClass","placeholder","value","lable","onChange","react_default","a","createElement","className","type","Button","text","onClick","style","backgroundColor","color","info","fontWeight","fontSize","Message","myClass","App","_this","this","_useState","useState","_useState2","Object","slicedToArray","height","setHeight","_useState3","_useState4","weight","setWeight","_useState5","_useState6","BMI","setBMI","input_field","e","target","componants_Button","check","isNaN","newH","BMIValue","toFixed","console","log","state","alert","message","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"6LAmBeA,eAhBI,SAAAC,GAA8D,IAA5DC,EAA4DD,EAA5DC,WAAWC,EAAiDF,EAAjDE,WAAWC,EAAsCH,EAAtCG,YAAYC,EAA0BJ,EAA1BI,MAAMC,EAAoBL,EAApBK,MAAMC,EAAcN,EAAdM,SAC/D,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAWR,GACbG,GAELE,EAAAC,EAAAC,cAAA,SACAC,UAAWT,EACXU,KAAK,OACLP,MAAOA,EACPD,YAAaA,EACbG,SAAUA,OCJPM,EARA,SAAAZ,GAAsB,IAAnBa,EAAmBb,EAAnBa,KAAMC,EAAad,EAAbc,QACtB,OACEP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,MAAO,CAACC,gBAAiB,UAAUC,MAAM,SAAUH,QAASA,GACxFD,ICHHK,EAAO,CACXD,MAAO,UACPE,WAAY,SACZC,SAAU,QAuBGC,EAnBC,SAAArB,GAAe,IAAbsB,EAAatB,EAAbsB,QAChB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAWY,GACdf,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMM,MAAOG,GAAb,gBADF,sCAGAX,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMM,MAAOG,GAAb,kBADF,+BAGAX,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMM,MAAOG,GAAb,eADF,6BAGAX,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMM,MAAOG,GAAb,YADF,2BC0DSK,MAnEf,WAAe,IAAAC,EAAAC,KAAAC,EAEiBC,qBAFjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEJK,EAFIH,EAAA,GAEII,EAFJJ,EAAA,GAAAK,EAGiBN,qBAHjBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGJE,EAHID,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAIWV,qBAJXW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIJE,EAJID,EAAA,GAICE,EAJDF,EAAA,GAsCb,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgC,EAAD,CACAxC,WAAW,WACXC,WAAW,WACXC,YAAY,oBACZC,MAAO+B,EACP9B,MAAM,YACNC,SAzCW,SAACoC,GAAD,OAAON,EAAUM,EAAEC,OAAOvC,UA0CrCG,EAAAC,EAAAC,cAACgC,EAAD,CACAxC,WAAW,WACXC,WAAW,WACXC,YAAY,oBACZE,MAAM,YACND,MAAO2B,EACPzB,SAjDW,SAACoC,GAAD,OAAOV,EAAUU,EAAEC,OAAOvC,UAkDrCG,EAAAC,EAAAC,cAACmC,EAAD,CAAQ/B,KAAK,YAAYC,QAhCd,WACnB,IAAM+B,EAfHC,MAAMX,GACE,0BACDA,EAAS,EACR,6BACDA,EAAS,GACR,mBACDW,MAAMf,GACL,0BACDA,EAAS,EACR,6BAEJ,GAKP,GAAc,KAAVc,EAAc,CACd,IAAIE,EAAOhB,EACRA,EAAS,IACRgB,EAAOhB,EAAO,KAElB,IAAMiB,GAAYb,GAAUY,EAAOA,IAAOE,QAAQ,GAClDT,EAAOQ,GACPE,QAAQC,IAAI3B,EAAK4B,MAAMb,UAEzBc,MAAMR,MAsBAtC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,yBAA+C6B,IAEnDhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAC6C,EAAD,CAAShC,QAAQ,aC5DlBiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAhB,EAAA,GAAAiB,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAA3D,GAAiD,IAA9C6D,EAA8C7D,EAA9C6D,OAAQC,EAAsC9D,EAAtC8D,OAAQC,EAA8B/D,EAA9B+D,OAAQC,EAAsBhE,EAAtBgE,OAAQC,EAAcjE,EAAdiE,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/D,EAAAC,EAAAC,cAACF,EAAAC,EAAM+D,WAAP,KACEhE,EAAAC,EAAAC,cAAC+D,EAAD,QAOJjB","file":"static/js/main.d753fc6f.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\n\r\nconst InputField = ({inputClass,lableClass,placeholder,value,lable,onChange}) => {\r\n    return (\r\n        <div className='form-group'>\r\n            <lable className={lableClass}>\r\n                {lable}\r\n            </lable>\r\n            <input \r\n            className={inputClass}\r\n            type=\"text\" \r\n            value={value}\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default InputField","import React from 'react'\r\n\r\nconst Button = ({ text ,onClick}) => {\r\n  return (\r\n    <button className='btn btn-info' style={{backgroundColor: '#1F4690',color:'white'}} onClick={onClick}>\r\n        {text}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button","import React from \"react\";\r\n\r\nconst info = {\r\n  color: \"#1F4690\",\r\n  fontWeight: \"bolder\",\r\n  fontSize: \"20px\",\r\n};\r\n\r\n\r\nconst Message = ({myClass}) => {\r\n  return (\r\n    <div className={myClass}>\r\n      <p>\r\n        <span style={info}>Underweight:</span> BMI is less than or equal to 18.5\r\n      </p>\r\n      <p>\r\n        <span style={info}>Normal weight:</span> BMI is between 18.5 - 24.9\r\n      </p>\r\n      <p>\r\n        <span style={info}>Overweight:</span> BMI is between 25 - 29.9\r\n      </p>\r\n      <p>\r\n        <span style={info}>Obesity:</span> BMI of 30 or greater\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;","\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport InputField  from './componants/input_field';\nimport Button from './componants/Button';\nimport Message from './componants/message';\nimport { useState } from 'react';\nimport React from 'react';\n\n\n\n\nfunction App() {\n\n    const [height, setHeight] = useState();\n    const [weight, setWeight] = useState();\n    const [BMI, setBMI] = useState();\n\n    const onChangeHeight = (e) => setHeight(e.target.value);\n    const onChangeWeight = (e) => setWeight(e.target.value);\n\n    const checkValues = () => {\n        if(isNaN(weight)){\n            return 'Weight must be a number';\n        } else if(weight < 0){\n            return 'Weight must be more than 0';\n        } else if(weight < 20) {\n            return 'Weight too small';\n        } else if(isNaN(height)){\n            return 'Height must be a number';\n        } else if(height < 0){\n            return 'Height must be more than 0';\n        }\n        return '';\n      };\n\n      const submitButton = () => {\n        const check = checkValues();\n        if (check === '') {\n            let newH = height;\n            if(height > 3){\n                newH = height/100;\n            }\n            const BMIValue = (weight / (newH * newH)).toFixed(2);\n            setBMI(BMIValue);\n            console.log(this.state.BMI);\n        } else {\n          alert(check);\n        }\n      };\n  return (\n    <div className='container'>\n        <div className='row my_form'>\n            <div className='col-md-6'>\n                <InputField\n                inputClass='my_input'\n                lableClass='my_lable'\n                placeholder='Enter your Weight'\n                value={weight}\n                lable='Weight : ' \n                onChange={onChangeWeight}/>\n                <InputField \n                inputClass='my_input'\n                lableClass='my_lable'\n                placeholder='Enter your Height'\n                lable='Height : '   \n                value={height}\n                onChange={onChangeHeight}/>\n                <Button text='Calculate' onClick={submitButton}/>\n                <h3 className='resulte'>Your BMI resulte is : {BMI}</h3>\n            </div>\n            <div className='col-md-6'>\n                <Message myClass='info'/>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}